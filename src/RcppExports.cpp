// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// errProj
SEXP errProj(const Eigen::Map<Eigen::MatrixXd> X);
RcppExport SEXP _RNOmni_errProj(SEXP XSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    rcpp_result_gen = Rcpp::wrap(errProj(X));
    return rcpp_result_gen;
END_RCPP
}
// scaleParam
SEXP scaleParam(const Eigen::Map<Eigen::VectorXd> y, const Eigen::Map<Eigen::MatrixXd> Q, const int df);
RcppExport SEXP _RNOmni_scaleParam(SEXP ySEXP, SEXP QSEXP, SEXP dfSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const int >::type df(dfSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleParam(y, Q, df));
    return rcpp_result_gen;
END_RCPP
}
// scoreStat
SEXP scoreStat(const Eigen::Map<Eigen::VectorXd> y, const Eigen::Map<Eigen::MatrixXd> Q, const Eigen::Map<Eigen::VectorXd> g, const double s2);
RcppExport SEXP _RNOmni_scoreStat(SEXP ySEXP, SEXP QSEXP, SEXP gSEXP, SEXP s2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type g(gSEXP);
    Rcpp::traits::input_parameter< const double >::type s2(s2SEXP);
    rcpp_result_gen = Rcpp::wrap(scoreStat(y, Q, g, s2));
    return rcpp_result_gen;
END_RCPP
}
// eps
SEXP eps(const Eigen::Map<Eigen::VectorXd> y, const Eigen::Map<Eigen::MatrixXd> Q);
RcppExport SEXP _RNOmni_eps(SEXP ySEXP, SEXP QSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Q(QSEXP);
    rcpp_result_gen = Rcpp::wrap(eps(y, Q));
    return rcpp_result_gen;
END_RCPP
}
// dotP
SEXP dotP(const Eigen::Map<Eigen::VectorXd> a, const Eigen::Map<Eigen::VectorXd> b);
RcppExport SEXP _RNOmni_dotP(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type a(aSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(dotP(a, b));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RNOmni_errProj", (DL_FUNC) &_RNOmni_errProj, 1},
    {"_RNOmni_scaleParam", (DL_FUNC) &_RNOmni_scaleParam, 3},
    {"_RNOmni_scoreStat", (DL_FUNC) &_RNOmni_scoreStat, 4},
    {"_RNOmni_eps", (DL_FUNC) &_RNOmni_eps, 2},
    {"_RNOmni_dotP", (DL_FUNC) &_RNOmni_dotP, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_RNOmni(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
